{"version":3,"sources":["components/Input.tsx","components/Questions.tsx","components/Result.tsx","components/Loader.tsx","services/quiz_service.ts","components/Content.tsx","components/Footer.tsx","components/Header.tsx","container/Main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Input","questions","category","setSendRequest","setCategory","setQuestions","level","setLevel","name","setName","className","action","onSubmit","e","preventDefault","FormControl","variant","fullWidth","TextField","required","id","label","value","onChange","target","InputLabel","Select","labelId","defaultValue","event","Number","MenuItem","type","Questions","question","options","callback","totalQuestions","currentQuestion","useState","selectedAns","setSelectedAns","component","RadioGroup","map","option","index","FormControlLabel","control","Radio","Result","score","total","setScore","setStep","setShowResult","setQuiz","categoryString","onClick","Loader","CircularProgress","color","getQuizDetails","a","fetch","response","json","results","quiz","questionObj","answer","correct_answer","array","incorrect_answers","concat","sort","Math","random","Content","step","showResult","gettingData","setGettingData","sendRequest","useEffect","fetchData","length","userAns","Footer","href","rel","Header","Main","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58736952.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./../styles/css/input.css\"\r\nimport { inputPropsType } from \"./../types/quiz_types\"\r\nimport {\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n} from \"@material-ui/core\"\r\n\r\nconst Input: React.FC<inputPropsType> = ({\r\n  questions,\r\n  category,\r\n  setSendRequest,\r\n  setCategory,\r\n  setQuestions,\r\n  level,\r\n  setLevel,\r\n  name,\r\n  setName,\r\n}) => {\r\n  return (\r\n    <div className=\"input-container\">\r\n      <h1>Quiz Settings</h1>\r\n      <form\r\n        className=\"question-form\"\r\n        action=\"\"\r\n        onSubmit={(e: React.FormEvent<EventTarget>) => {\r\n          e.preventDefault()\r\n          setSendRequest(true)\r\n        }}\r\n      >\r\n        <FormControl className=\"form-control\" variant=\"outlined\" fullWidth>\r\n          <TextField\r\n            className=\"form-text-field\"\r\n            required\r\n            id=\"outlined-basic\"\r\n            label=\"Your Name\"\r\n            variant=\"outlined\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n          />\r\n        </FormControl>\r\n        <div className=\"questions-dropdown\">\r\n          <FormControl className=\"form-control\" variant=\"outlined\" fullWidth>\r\n            <InputLabel\r\n              aria-label=\"category-label\"\r\n              className=\"form-label\"\r\n              id=\"demo-simple-select-outlined-label-category\"\r\n            >\r\n              Category\r\n            </InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-outlined-label-category\"\r\n              id=\"demo-simple-select-outlined-category\"\r\n              value={category}\r\n              defaultValue={category}\r\n              onChange={(event) => setCategory(Number(event.target.value))}\r\n              required\r\n              label=\"Category\"\r\n            >\r\n              <MenuItem className=\"form-menu-item\" value={9}>\r\n                General Knowledge\r\n              </MenuItem>\r\n              <MenuItem className=\"form-menu-item\" value={11}>\r\n                Movies\r\n              </MenuItem>\r\n              <MenuItem className=\"form-menu-item\" value={17}>\r\n                Science\r\n              </MenuItem>\r\n              <MenuItem className=\"form-menu-item\" value={18}>\r\n                Computers\r\n              </MenuItem>\r\n              <MenuItem className=\"form-menu-item\" value={19}>\r\n                Mathematics\r\n              </MenuItem>\r\n              <MenuItem className=\"form-menu-item\" value={21}>\r\n                Sports\r\n              </MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n        <div className=\"questions-dropdown\">\r\n          <FormControl className=\"form-control\" variant=\"outlined\" fullWidth>\r\n            <InputLabel\r\n              className=\"form-label\"\r\n              id=\"demo-simple-select-outlined-label-questions\"\r\n            >\r\n              Questions\r\n            </InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-outlined-label-questions\"\r\n              id=\"demo-simple-select-outlined-questions\"\r\n              value={questions}\r\n              onChange={(event) => setQuestions(Number(event.target.value))}\r\n              required\r\n              label=\"Questions\"\r\n            >\r\n              <MenuItem value={5}>Five</MenuItem>\r\n              <MenuItem value={10}>Ten</MenuItem>\r\n              <MenuItem value={15}>Fifteen</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n\r\n        <div className=\"questions-dropdown\">\r\n          <FormControl className=\"form-control\" variant=\"outlined\" fullWidth>\r\n            <InputLabel\r\n              className=\"form-label\"\r\n              id=\"demo-simple-select-outlined-label-difficulty\"\r\n            >\r\n              Difficulty\r\n            </InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-outlined-label-difficulty\"\r\n              id=\"demo-simple-select-outlined-difficulty\"\r\n              value={level}\r\n              onChange={(event) => setLevel(event.target.value as string)}\r\n              required\r\n              label=\"Questions\"\r\n            >\r\n              <MenuItem value=\"easy\">Easy</MenuItem>\r\n              <MenuItem value=\"medium\">Medium</MenuItem>\r\n              <MenuItem value=\"hard\">Hard</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n        <input className=\"submit-btn\" value=\"Start Quiz\" type=\"submit\" />\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Input","import React, { useState } from \"react\"\r\nimport {\r\n  FormControl,\r\n  FormControlLabel,\r\n  RadioGroup,\r\n  Radio,\r\n} from \"@material-ui/core\"\r\nimport { questionPropsType } from \"./../types/quiz_types\"\r\nimport \"./../styles/css/questions.css\"\r\n\r\nconst Questions: React.FC<questionPropsType> = ({\r\n  question,\r\n  options,\r\n  callback,\r\n  totalQuestions,\r\n  currentQuestion,\r\n}) => {\r\n  // Answer state\r\n  let [selectedAns, setSelectedAns] = useState(\"\")\r\n\r\n  // Radio\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSelectedAns(event.target.value)\r\n  }\r\n \r\n  return (\r\n    <div className=\"questions-container\">\r\n      <h1>\r\n        Questions: {++currentQuestion} / {totalQuestions}\r\n      </h1>\r\n      <h3>{question}</h3>\r\n      <form\r\n        className=\"question-form\"\r\n        action=\"\"\r\n        onSubmit={(e: React.FormEvent<EventTarget>) => callback(e, selectedAns)}\r\n      >\r\n        <FormControl component=\"fieldset\">\r\n          <RadioGroup\r\n            aria-label=\"option\"\r\n            name=\"option\"\r\n            value={selectedAns}\r\n            onChange={handleChange}\r\n            className='form-radio-group'\r\n          >\r\n            {options.map((option, index) => {\r\n              return (\r\n                <div key={index}>\r\n                  <FormControlLabel\r\n                    value={option}\r\n                    className=\"form-label\"\r\n                    control={<Radio required={true} />}\r\n                    label={option}\r\n                  />\r\n                </div>\r\n              )\r\n            })}\r\n          </RadioGroup>\r\n        </FormControl>\r\n        <input\r\n          className=\"submit-btn\"\r\n          type=\"submit\"\r\n          value=\"Submit and Proceed\"\r\n        />\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Questions","import React from \"react\"\r\nimport \"./../styles/css/result.css\"\r\nimport { resultPropsType } from \"./../types/quiz_types\"\r\n\r\nconst Result: React.FC<resultPropsType> = ({\r\n  score,\r\n  name,\r\n  total,\r\n  category,\r\n  level,\r\n  setScore,\r\n  setStep,\r\n  setLevel,\r\n  setCategory,\r\n  setName,\r\n  setQuestions,\r\n  setShowResult,\r\n  setQuiz,\r\n  setSendRequest,\r\n}) => {\r\n  const handleTryAgain = () => {\r\n    setShowResult(false)\r\n    setSendRequest(false)\r\n    setQuiz([])\r\n    setScore(0)\r\n    setStep(0)\r\n    setLevel(\"easy\")\r\n    setCategory(9)\r\n    setName(\"\")\r\n    setQuestions(5)\r\n  }\r\n\r\n  let categoryString = \"\"\r\n\r\n  if (category === 9) {\r\n    categoryString = \"General Knowledge\"\r\n  } else if (category === 17) {\r\n    categoryString = \"Science\"\r\n  } else if (category === 18) {\r\n    categoryString = \"Computers\"\r\n  } else if (category === 19) {\r\n    categoryString = \"Mathematics\"\r\n  } else if (category === 21) {\r\n    categoryString = \"Sports\"\r\n  }\r\n\r\n  return (\r\n    <div className=\"result-container\">\r\n      <div className=\"heading\">\r\n        {\" \"}\r\n        <h1>Your Result</h1>\r\n      </div>\r\n      <div className=\"results\">\r\n        <h3>\r\n          {\" \"}\r\n          Name <span>{name} </span>\r\n        </h3>\r\n        <h3>\r\n          {\" \"}\r\n          Total Questions <span>{total}</span>\r\n        </h3>\r\n        <h3>\r\n          {\" \"}\r\n          Score <span>{score}</span>\r\n        </h3>\r\n        <h3>\r\n          {\" \"}\r\n          Percentage <span>{(score / total) * 100}%</span>\r\n        </h3>\r\n        <h3>\r\n          {\" \"}\r\n          Difficulty Level <span>{level}</span>\r\n        </h3>\r\n        <h3>\r\n          {\" \"}\r\n          Category <span>{categoryString}</span>\r\n        </h3>\r\n      </div>\r\n      <div className=\"button\">\r\n        <input\r\n          type=\"button\"\r\n          onClick={handleTryAgain}\r\n          className=\"submit-btn\"\r\n          value=\"Try Again\"\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Result","import React from \"react\"\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\"\r\nimport \"./../styles/css/loader.css\"\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <CircularProgress color=\"inherit\" />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader","import { Quiz, QuestionType } from \"../types/quiz_types\";\r\n\r\nconst shuffleAnswers = (array: any[]) =>\r\n  [...array].sort(() => Math.random() - 0.5);\r\n\r\n// Get Data from API\r\nexport const getQuizDetails = async (totalQuestions: number, category: number, level: string): Promise<QuestionType[]> => {\r\n  \r\n  const response = await fetch(\r\n    `https://opentdb.com/api.php?amount=${totalQuestions}&category=${category}&difficulty=${level}&type=multiple`\r\n  );\r\n  \r\n  let { results } = await response.json();\r\n  \r\n  const quiz: QuestionType[] = results.map((questionObj: Quiz) => {\r\n    return {\r\n      question: questionObj.question,\r\n      answer: questionObj.correct_answer,\r\n      options: shuffleAnswers(\r\n        questionObj.incorrect_answers.concat(questionObj.correct_answer)\r\n      ),\r\n    };\r\n  });\r\n  \r\n  return quiz;\r\n};","import React, { useState, useEffect } from \"react\"\r\nimport \"./../styles/css/content.css\"\r\nimport Input from \"./Input\"\r\nimport Questions from \"./Questions\"\r\nimport Result from \"./Result\"\r\nimport Loader from \"./Loader\"\r\nimport { QuestionType } from \"./../types/quiz_types\"\r\nimport { getQuizDetails } from \"./../services/quiz_service\"\r\n\r\nconst Content = () => {\r\n  // Quiz State\r\n  let [quiz, setQuiz] = useState<QuestionType[]>([])\r\n  let [step, setStep] = useState<number>(0)\r\n  let [score, setScore] = useState<number>(0)\r\n  let [questions, setQuestions] = useState<number>(5)\r\n  let [level, setLevel] = useState<string>(\"easy\")\r\n  let [category, setCategory] = useState<number>(9)\r\n  let [showResult, setShowResult] = useState<Boolean>(false)\r\n  let [name, setName] = useState<string>(\"\")\r\n  let [gettingData, setGettingData] = useState<Boolean>(false)\r\n\r\n  const [sendRequest, setSendRequest] = useState<Boolean>(false)\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (sendRequest) {\r\n        setGettingData(true)\r\n\r\n        const totalQuestions: QuestionType[] = await getQuizDetails(\r\n          questions,\r\n          category,\r\n          level\r\n        )\r\n\r\n        setGettingData(false)\r\n        setQuiz(totalQuestions)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [sendRequest, questions, category, level])\r\n  // Create handleSubmit function\r\n  const handleSubmit = (e: React.FormEvent<EventTarget>, userAns: string) => {\r\n    e.preventDefault()\r\n\r\n    const currentQuestion: QuestionType = quiz[step]\r\n\r\n    if (userAns === currentQuestion.answer) {\r\n      setScore(++score)\r\n    }\r\n\r\n    if (step !== quiz.length - 1) {\r\n      setStep(++step)\r\n    } else {\r\n      setShowResult(true)\r\n    }\r\n  }\r\n\r\n  // Loading\r\n  if (gettingData) {\r\n    return (\r\n      <div className=\"content-container\">\r\n        <Loader />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  //  RETURN\r\n  return (\r\n    <div className=\"content-container\">\r\n      {quiz.length ? (\r\n        !showResult ? (\r\n          <Questions\r\n            options={quiz[step].options}\r\n            question={quiz[step].question}\r\n            callback={handleSubmit}\r\n            totalQuestions={quiz.length}\r\n            currentQuestion={step}\r\n          />\r\n        ) : (\r\n          <Result\r\n            // Data\r\n            name={name}\r\n            score={score}\r\n            total={quiz.length}\r\n            level={level}\r\n            category={category}\r\n            // Functions\r\n            setName={setName}\r\n            setScore={setScore}\r\n            setQuestions={setQuestions}\r\n            setCategory={setCategory}\r\n            setLevel={setLevel}\r\n            setStep={setStep}\r\n            setQuiz={setQuiz}\r\n            setSendRequest={setSendRequest}\r\n            setShowResult={setShowResult}\r\n          />\r\n        )\r\n      ) : (\r\n        <Input\r\n          setName={setName}\r\n          setSendRequest={setSendRequest}\r\n          name={name}\r\n          questions={questions}\r\n          setQuestions={setQuestions}\r\n          level={level}\r\n          category={category}\r\n          setCategory={setCategory}\r\n          setLevel={setLevel}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Content","import React from \"react\"\r\nimport \"./../styles/css/footer.css\"\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"footer-container\">\r\n      <h1>\r\n         {'</>'}{\" \"}\r\n        <a\r\n          href=\"https://github.com/reetsrivastava\"\r\n          rel=\"noopener noreferrer\"\r\n          target=\"_blank\"\r\n        >\r\n          Reet Srivastava\r\n        </a>\r\n      </h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer","import React from \"react\"\r\nimport \"./../styles/css/header.css\"\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"header-container\">\r\n      <h1>AD ASTRA Quiz App</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport Content from '../components/Content';\r\nimport Footer from '../components/Footer';\r\nimport Header from '../components/Header';\r\nimport './../styles/css/main.css'\r\n\r\nconst Main = () =>{\r\n    return(\r\n        <div className='main-container'>\r\n            <Header/>\r\n            <Content/>\r\n            <Footer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from \"react\"\nimport Main from \"./container/Main\"\n\nconst App = () => {\n  return <Main />\n}\n\nexport default App","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}